# Generated by Django 3.2.4 on 2021-07-04 22:09

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import public.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('dni', models.CharField(blank=True, max_length=8, null=True, unique=True, validators=[django.core.validators.MinLengthValidator(8)], verbose_name='DNI')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], max_length=1)),
                ('photo', models.ImageField(default='user_profile/user_default.png', upload_to=public.models.get_image_path, verbose_name='foto')),
                ('phone', models.CharField(max_length=9, verbose_name='teléfono')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'db_table': 'public"."user',
                'ordering': ['date_joined'],
                'get_latest_by': 'date_joined',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='nombre')),
                ('description', models.TextField(default='', max_length=512, verbose_name='descripción')),
                ('image', models.ImageField(upload_to=public.models.get_service_path, verbose_name='imagen')),
                ('icon', models.CharField(default='bolt', help_text='Nombre de un ícono de Material', max_length=50)),
                ('register_date', models.DateTimeField(auto_now_add=True)),
                ('update_date', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=models.SET(public.models.get_deleted_user), to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Servicio',
                'db_table': 'public"."service',
                'ordering': ['register_date'],
                'get_latest_by': 'register_date',
            },
        ),
        migrations.CreateModel(
            name='TechnicalService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('register_date', models.DateTimeField(auto_now_add=True)),
                ('update_date', models.DateTimeField(auto_now=True)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='public.service')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'public"."technical_service',
                'ordering': ['register_date'],
                'get_latest_by': 'register_date',
            },
        ),
        migrations.CreateModel(
            name='ScheduledService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('PE', 'Pendiente'), ('CO', 'Completado'), ('CA', 'Cancelado')], default='PE', max_length=2, verbose_name='estado')),
                ('date', models.DateField(verbose_name='fecha')),
                ('time', models.TimeField(verbose_name='hora')),
                ('address', models.CharField(blank=True, max_length=124, null=True, verbose_name='direccion')),
                ('latitude', models.CharField(blank=True, max_length=20, null=True, verbose_name='latitud')),
                ('longitude', models.CharField(blank=True, max_length=20, null=True, verbose_name='longitud')),
                ('reference', models.CharField(default='', max_length=1000, verbose_name='referencia')),
                ('register_date', models.DateTimeField(auto_now_add=True)),
                ('update_date', models.DateTimeField(auto_now=True)),
                ('client', models.ForeignKey(on_delete=models.SET(public.models.get_deleted_user), related_name='scheduled_services', to=settings.AUTH_USER_MODEL, verbose_name='cliente')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='public.service')),
                ('technician', models.ForeignKey(on_delete=models.SET(public.models.get_deleted_user), related_name='services_provided', to=settings.AUTH_USER_MODEL, verbose_name='técnico')),
            ],
            options={
                'verbose_name': 'Servicio Agendado',
                'verbose_name_plural': 'Servicios Agendados',
                'db_table': 'public"."scheduled_service',
                'ordering': ['register_date'],
                'get_latest_by': 'register_date',
            },
        ),
        migrations.CreateModel(
            name='Calification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.PositiveSmallIntegerField(validators=[django.core.validators.MaxValueValidator(limit_value=5)])),
                ('comment', models.CharField(default='', max_length=255)),
                ('register_date', models.DateTimeField(auto_now_add=True)),
                ('update_date', models.DateTimeField(auto_now=True)),
                ('scheduled_service', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='public.scheduledservice')),
            ],
            options={
                'verbose_name': 'Calificación',
                'verbose_name_plural': 'Calificaciones',
                'db_table': 'public"."calification',
                'ordering': ['register_date'],
                'get_latest_by': 'register_date',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='services',
            field=models.ManyToManyField(help_text='Servicios asignados al técnico.', related_name='users', through='public.TechnicalService', to='public.Service'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='Technician',
            fields=[
            ],
            options={
                'verbose_name': 'Técnico',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('public.user',),
            managers=[
                ('objects', public.models.TechnicianManager()),
            ],
        ),
    ]
